{"version":3,"sources":["contracts/voting_approval.teal","contracts/voting_clear.teal","utils/conversions.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/voting/AddPoll.jsx","components/voting/Poll.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/voting/Polls.jsx","assets/img/voting.jpg","App.js","reportWebVitals.js","index.js","utils/voting.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToNumber","str","toNumber","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddPoll","createPoll","useState","setId","image","setImage","description","setDescription","option1","setOption1","option2","setOption2","option3","setOption3","voting_end","setVotingEnd","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","Footer","disabled","Poll","poll","vote","optIn","declareWinner","deletePoll","isOptedIn","count1","count2","count3","voting_start","winner","owner","appId","selectedOption","setSelectedOption","optedVar","setOptedVar","Col","Card","objectFit","Text","fontWeight","fontStyle","isOptedInAction","then","opted","startTime","Date","endTime","toLocaleTimeString","RenderTime","marginLeft","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Polls","fetchBalance","polls","setPolls","loading","setLoading","getPolls","getPollsAction","console","log","catch","error","finally","_","useEffect","data","createPollAction","toast","deletePollAction","option","voteAction","optInAction","declareWinnerAction","res","Row","xs","sm","lg","map","index","App","setAddress","setName","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","votingNote","voting_duration","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","optinTxn","makeApplicationOptInTxnFromObject","appIndex","tx","voteArg","appCallTxn","makeApplicationCallTxnFromObject","optionArg","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupAccountAppLocalStates","accountLocalState","appIds","i","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"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","file":"static/js/main.a41ef3a6.chunk.js","sourcesContent":["export default \"#pragma version 5\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l24\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l23\\ntxn OnCompletion\\nint UpdateApplication\\n==\\nbnz main_l22\\ntxn OnCompletion\\nint OptIn\\n==\\nbnz main_l21\\ntxna ApplicationArgs 0\\nbyte \\\"vote\\\"\\n==\\nbnz main_l13\\ntxna ApplicationArgs 0\\nbyte \\\"declare_winner\\\"\\n==\\nbnz main_l7\\nerr\\nmain_l7:\\ntxn Sender\\nbyte \\\"OWNER\\\"\\napp_global_get\\n==\\nglobal LatestTimestamp\\nbyte \\\"END\\\"\\napp_global_get\\n>=\\n&&\\nassert\\nbyte \\\"WINNER\\\"\\nbyte \\\"OPTION1\\\"\\napp_global_get\\napp_global_put\\nbyte \\\"COUNT2\\\"\\napp_global_get\\nbyte \\\"COUNT1\\\"\\napp_global_get\\n>\\nbnz main_l12\\nbyte \\\"COUNT3\\\"\\napp_global_get\\nbyte \\\"COUNT2\\\"\\napp_global_get\\n>\\nbnz main_l10\\nerr\\nmain_l10:\\nbyte \\\"WINNER\\\"\\nbyte \\\"OPTION3\\\"\\napp_global_get\\napp_global_put\\nmain_l11:\\nint 1\\nreturn\\nmain_l12:\\nbyte \\\"WINNER\\\"\\nbyte \\\"OPTION2\\\"\\napp_global_get\\napp_global_put\\nb main_l11\\nmain_l13:\\ntxn NumAppArgs\\nint 2\\n==\\ntxn Sender\\nbyte \\\"VOTED\\\"\\napp_local_get\\nint 0\\n==\\n&&\\nglobal LatestTimestamp\\nbyte \\\"END\\\"\\napp_global_get\\n<\\n&&\\nassert\\ntxna ApplicationArgs 1\\nbyte \\\"OPTION1\\\"\\napp_global_get\\n==\\nbnz main_l20\\ntxna ApplicationArgs 1\\nbyte \\\"OPTION2\\\"\\napp_global_get\\n==\\nbnz main_l19\\ntxna ApplicationArgs 1\\nbyte \\\"OPTION3\\\"\\napp_global_get\\n==\\nbnz main_l17\\nerr\\nmain_l17:\\nbyte \\\"COUNT3\\\"\\nbyte \\\"COUNT3\\\"\\napp_global_get\\nint 1\\n+\\napp_global_put\\nmain_l18:\\ntxn Sender\\nbyte \\\"VOTED\\\"\\nint 1\\napp_local_put\\nint 1\\nreturn\\nmain_l19:\\nbyte \\\"COUNT2\\\"\\nbyte \\\"COUNT2\\\"\\napp_global_get\\nint 1\\n+\\napp_global_put\\nb main_l18\\nmain_l20:\\nbyte \\\"COUNT1\\\"\\nbyte \\\"COUNT1\\\"\\napp_global_get\\nint 1\\n+\\napp_global_put\\nb main_l18\\nmain_l21:\\nint 1\\nreturn\\nmain_l22:\\nglobal CreatorAddress\\ntxn Sender\\n==\\nassert\\nint 1\\nreturn\\nmain_l23:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l24:\\ntxn NumAppArgs\\nint 7\\n==\\nassert\\ntxn Note\\nbyte \\\"voting-system:uv1\\\"\\n==\\nassert\\nbyte \\\"ID\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"DESCRIPTION\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"OPTION1\\\"\\ntxna ApplicationArgs 3\\napp_global_put\\nbyte \\\"OPTION2\\\"\\ntxna ApplicationArgs 4\\napp_global_put\\nbyte \\\"OPTION3\\\"\\ntxna ApplicationArgs 5\\napp_global_put\\nbyte \\\"START\\\"\\nglobal LatestTimestamp\\napp_global_put\\nbyte \\\"END\\\"\\nglobal LatestTimestamp\\ntxna ApplicationArgs 6\\nbtoi\\n+\\napp_global_put\\nbyte \\\"OWNER\\\"\\ntxn Sender\\napp_global_put\\nbyte \\\"COUNT1\\\"\\nint 0\\napp_global_put\\nbyte \\\"COUNT2\\\"\\nint 0\\napp_global_put\\nbyte \\\"COUNT3\\\"\\nint 0\\napp_global_put\\nbyte \\\"WINNER\\\"\\nbyte \\\"\\\"\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 5\\nint 1\\nreturn\";","import {ALGORAND_DECIMALS} from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.toString().slice(0, 5) + \"...\" + address.toString().slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}\n\nexport const stringToNumber = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.toNumber();\n}","import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({name, coverImg, connect}) => {\n    return (\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n            <div className=\"mt-auto text-light mb-5\">\n                <div\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n                    style={{maxWidth: \"320px\"}}\n                >\n                    <img src={coverImg} alt=\"\"/>\n                </div>\n                <h1>{name}</h1>\n                <p>Please connect your wallet to continue.</p>\n                <Button\n                    onClick={() => connect()}\n                    variant=\"outline-light\"\n                    className=\"rounded-pill px-3 mt-3\"\n                >\n                    Connect Wallet\n                </Button>\n            </div>\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n        </div>\n    );\n};\n\nCover.propTypes = {\n    name: PropTypes.string,\n    coverImg: PropTypes.string,\n    connect: PropTypes.func\n};\n\nexport default Cover;","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Jazzicon diameter={size} seed={parseInt(address.toString().slice(2, 10), 16)}/>\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default Identicon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;","import React, {useCallback, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Button, FloatingLabel, Form, Modal} from \"react-bootstrap\";\nimport {stringToMicroAlgos, stringToNumber} from \"../../utils/conversions\";\n\nconst AddPoll = ({createPoll}) => {\n    const [id, setId] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [option1, setOption1] = useState(\"\");\n    const [option2, setOption2] = useState(\"\");\n    const [option3, setOption3] = useState(\"\");\n    const [voting_end, setVotingEnd] = useState(0); //voting duration\n\n\n    const isFormFilled = useCallback(() => {\n        return id && image && description && option1 && option2 && option3 && voting_end\n    }, [id, image, description, option1, option2, option3, voting_end]);\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button\n                onClick={handleShow}\n                variant=\"dark\"\n                className=\"rounded-pill px-0\"\n                style={{width: \"38px\"}}\n            >\n                <i className=\"bi bi-plus\"></i>\n            </Button>\n            <Modal show={show} onHide={handleClose} centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>New Poll</Modal.Title>\n                </Modal.Header>\n                <Form>\n                    <Modal.Body>\n                        <FloatingLabel\n                            controlId=\"inputName\"\n                            label=\"Product name\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                onChange={(e) => {\n                                    setId(e.target.value);\n                                }}\n                                placeholder=\"Enter name of product\"\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputUrl\"\n                            label=\"Image URL\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Image URL\"\n                                value={image}\n                                onChange={(e) => {\n                                    setImage(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputDescription\"\n                            label=\"Description\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"description\"\n                                style={{ height: \"80px\" }}\n                                onChange={(e) => {\n                                    setDescription(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputDescription\"\n                            label=\"Option1\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"option1\"\n                                style={{ height: \"80px\" }}\n                                onChange={(e) => {\n                                    setOption1(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputDescription\"\n                            label=\"Option2\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"option2\"\n                                style={{ height: \"80px\" }}\n                                onChange={(e) => {\n                                    setOption2(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputDescription\"\n                            label=\"Option3\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"option2\"\n                                style={{ height: \"80px\" }}\n                                onChange={(e) => {\n                                    setOption3(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputDescription\"\n                            label=\"Voting duration in seconds\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"0\"\n                                style={{ height: \"80px\" }}\n                                onChange={(e) => {\n                                    setVotingEnd(stringToNumber(e.target.value));\n                                }}\n                            />\n                        </FloatingLabel>\n                    </Modal.Body>\n                </Form>\n                <Modal.Footer>\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button\n                        variant=\"dark\"\n                        disabled={!isFormFilled()}\n                        onClick={() => {\n                            createPoll({\n                                id,\n                                image,\n                                description,\n                                option1,\n                                option2,\n                                option3,\n                                voting_end,\n                            });\n                            handleClose();\n                        }}\n                    >\n                        Save poll\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nAddPoll.propTypes = {\n    createPoll: PropTypes.func.isRequired,\n};\n\nexport default AddPoll;","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\nimport {microAlgosToString, truncateAddress} from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\nimport {isOptedInAction} from \"../../utils/voting\";\n\nconst Poll = ({address, poll, vote, optIn, declareWinner, deletePoll, isOptedIn}) => {\n    const {id, image, description, option1, option2, option3, count1, count2, count3, voting_start, voting_end, winner, owner, appId} =\n        poll;\n\n    const [selectedOption, setSelectedOption] = useState(\"\")\n    const [optedVar, setOptedVar] = useState(\"\")\n\n    const handleChange = (e) => {\n        setSelectedOption(e.target.value)\n    }\n\n    const RenderOptInButton = () => {\n        isOptedInAction(address, appId).then(\n            opted => {\n                setOptedVar(opted)\n            }\n        )\n\n        let res\n        // let opted = false\n        if(!optedVar){\n            res = <Button onClick={() => optIn(address, poll)}>\n                OptIn\n            </Button>\n        }else{\n            res = <Button disabled>\n                Opted in\n            </Button>\n        }\n        return res\n    }\n\n    const RenderVoteButton = () => {\n        let res\n        // let opted = false\n        if(!optedVar){\n            res = <Button disabled>\n                    Vote\n                </Button>\n        }else{\n            res = <Button\n                    onClick={() => vote(poll, selectedOption)}\n                >\n                    Vote\n                </Button>\n        }\n        return res\n    }\n\n    const RenderTime = () => {\n        let startTime = new Date(voting_start * 1000)\n        let endTime = new Date(voting_end * 1000)\n\n        return (\n            <div>\n                <div>\n                    Voting start: {startTime.toLocaleTimeString(\"default\")} h\n                </div>\n                <div>\n                    Voting end: {endTime.toLocaleTimeString(\"default\")} h\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <Col key={id}>\n            <Card className=\"h-100\">\n                <Card.Header>\n                    <Stack direction=\"horizontal\" gap={2}>\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\n                        <Identicon size={28} address={owner}/>\n                        {/* <Badge bg=\"secondary\" className=\"ms-auto\">\n                            {sold} Sold\n                        </Badge> */}\n                    </Stack>\n                </Card.Header>\n                <div className=\"ratio ratio-4x3\">\n                    <img src={image} alt={id} style={{objectFit: \"cover\"}}/>\n                </div>\n                <Card.Body className=\"d-flex flex-column text-center\">\n                    <Card.Title>{id}</Card.Title>\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n                    <Form className=\"d-flex align-content-stretch flex-column gap-2\">\n                        <div style={{fontWeight: \"bold\", fontStyle: \"italic\"}}>Select option for voting</div>\n                        <div onChange={handleChange}>\n                            <input type=\"radio\" value={option1} /> {option1} ({count1})\n                            <input type=\"radio\" value={option2} /> {option2} ({count2})\n                            <input type=\"radio\" value={option3} /> {option3} ({count3})\n                        </div>\n                        <div>\n                            {RenderOptInButton()}\n                        </div>\n                        <div>\n                            {RenderVoteButton()}\n                        </div>\n                        <div>\n                            { address==owner &&\n                                <Button onClick={() => declareWinner(address, poll)}>\n                                    Declare winner\n                                </Button>\n                            }\n                            Winner: {winner}\n                        </div>\n                        <div>\n                            {RenderTime()}\n                        </div>\n                        <div>\n                            {poll.owner === address &&\n                                <div>\n                                    Delete poll \n                                    <Button\n                                        variant=\"outline-danger\"\n                                        onClick={() => deletePoll(poll)}\n                                        className=\"btn\"\n                                        style={{marginLeft: \"10px\"}}\n                                    >\n                                        <i className=\"bi bi-trash\"></i>\n                                    </Button>\n                                </div>\n                            }\n                        </div>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n};\n\nPoll.propTypes = {\n    address: PropTypes.string.isRequired,\n    poll: PropTypes.instanceOf(Object).isRequired,\n    vote: PropTypes.func.isRequired,\n    deletePoll: PropTypes.func.isRequired\n};\n\nexport default Poll;","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n    <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n    />\n);\n\nconst NotificationSuccess = ({text}) => (\n    <div>\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst NotificationError = ({text}) => (\n    <div>\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst Props = {\n    text: PropTypes.string,\n};\n\nconst DefaultProps = {\n    text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport {Notification, NotificationSuccess, NotificationError};","import React, {useEffect, useState} from \"react\";\nimport {toast} from \"react-toastify\";\nimport AddPoll from \"./AddPoll\";\nimport Poll from \"./Poll\";\nimport Loader from \"../utils/Loader\";\nimport {NotificationError, NotificationSuccess} from \"../utils/Notifications\";\nimport {createPollAction, deletePollAction, getPollsAction, voteAction, optInAction, declareWinnerAction, isOptedInAction} from \"../../utils/voting\";\nimport PropTypes from \"prop-types\";\nimport {Row} from \"react-bootstrap\";\n\nconst Polls = ({address, fetchBalance}) => {\n    const [polls, setPolls] = useState([]);\n    const [loading, setLoading] = useState(false);\n    \n    const getPolls = async () => {\n        setLoading(true);\n        getPollsAction()\n            .then(polls => {\n                if (polls) {\n                    console.log(\"Pollllllls: \", polls)\n                    setPolls(polls);\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n            .finally(_ => {\n                setLoading(false);\n            });\n    };\n\n    useEffect(() => {\n        getPolls();\n    }, []);\n\n    const createPoll = async (data) => {\n\t    setLoading(true);\n\t    createPollAction(address, data)\n\t        .then(() => {\n\t            toast(<NotificationSuccess text=\"Poll added successfully.\"/>);\n\t            getPolls();\n\t            fetchBalance(address);\n\t        })\n\t        .catch(error => {\n\t            console.log(error);\n\t            toast(<NotificationError text=\"Failed to create a poll.\"/>);\n\t            setLoading(false);\n\t        })\n\t};\n\n    const deletePoll = async (poll) => {\n        setLoading(true);\n        deletePollAction(address, poll.appId)\n            .then(() => {\n                toast(<NotificationSuccess text=\"Poll deleted successfully\"/>);\n                getPolls();\n                fetchBalance(address);\n            })\n            .catch(error => {\n                console.log(error)\n                toast(<NotificationError text=\"Failed to delete poll.\"/>);\n                setLoading(false);\n            })\n    };\n\n    const vote = async (poll, option) => {\n        setLoading(true);\n        voteAction(address, poll, option)\n        .then(() => {\n            toast(<NotificationSuccess text=\"Voted successfully\"/>);\n            getPolls();\n            fetchBalance(address);\n        })\n        .catch(error => {\n            console.log(error)\n            toast(<NotificationError text=\"Failed to vote.\"/>);\n            setLoading(false);\n        })\n    }\n\n    const optIn = async (address, poll) => {\n        setLoading(true);\n        optInAction(address, poll)\n        .then(() => {\n            toast(<NotificationSuccess text=\"Opted in successfully\"/>);\n            getPolls();\n            fetchBalance(address);\n        })\n        .catch(error => {\n            console.log(error)\n            toast(<NotificationError text=\"Failed to optIn.\"/>);\n            setLoading(false);\n        })\n    }\n\n    const declareWinner = async (address, poll) => {\n        setLoading(true);\n        declareWinnerAction(address, poll)\n        .then(() => {\n            toast(<NotificationSuccess text=\"Successfully ended action\"/>);\n            getPolls();\n            fetchBalance(address);\n        })\n        .catch(error => {\n            console.log(error)\n            toast(<NotificationError text=\"Failed to declare a winner.\"/>);\n            setLoading(false);\n        })\n    }\n\n    const isOptedIn = (address, appId) => {\n        // e.preventDefault();\n        // setLoading(true);\n        isOptedInAction(address, appId)\n        .then((res) => {\n            return res\n        })\n        .catch(error => {\n            console.log(error)\n            return error\n        })\n    }\n\n    if (loading) {\n\t    return <Loader/>;\n\t}\n\treturn (\n\t    <>\n\t        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n\t            <h1 className=\"fs-4 fw-bold mb-0\">Algo voting</h1>\n\t            <AddPoll createPoll={createPoll}/>\n                {/* <button onClick={(e) => isOptedIn(e, address, 112529866)}>Is opted in?</button> */}\n\t        </div>\n\t        <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n\t            <>\n\t                {polls.map((poll, index) => (\n\t                    <Poll\n\t                        address={address}\n\t                        poll={poll}\n                            vote={vote}\n                            optIn={optIn}\n                            declareWinner={declareWinner}\n\t                        deletePoll={deletePoll}\n                            isOptedIn={isOptedIn}\n\t                        key={index}\n\t                    />\n\t                ))}\n\t            </>\n\t        </Row>\n\t    </>\n\t);\n};\n\nPolls.propTypes = {\n    address: PropTypes.string.isRequired,\n    fetchBalance: PropTypes.func.isRequired\n};\n\nexport default Polls;","export default __webpack_public_path__ + \"static/media/voting.f1bc2b5c.jpg\";","import React, {useState} from \"react\";\nimport Cover from \"./components/Cover\";\nimport './App.css';\nimport Wallet from \"./components/Wallet\";\nimport {Container, Nav} from \"react-bootstrap\";\nimport Polls from \"./components/voting/Polls\";\nimport {Notification} from \"./components/utils/Notifications\";\nimport {indexerClient, myAlgoConnect} from \"./utils/constants\";\nimport coverImg from \"./assets/img/voting.jpg\"\nconst App = function AppWrapper() {\n\n    const [address, setAddress] = useState(null);\n    const [name, setName] = useState(null);\n    const [balance, setBalance] = useState(0);\n\n    const fetchBalance = async (accountAddress) => {\n        indexerClient.lookupAccountByID(accountAddress).do()\n            .then(response => {\n                const _balance = response.account.amount;\n                setBalance(_balance);\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    };\n\n    const connectWallet = async () => {\n        myAlgoConnect.connect()\n            .then(accounts => {\n                const _account = accounts[0];\n                setAddress(_account.address);\n                setName(_account.name);\n                fetchBalance(_account.address);\n            }).catch(error => {\n            console.log('Could not connect to MyAlgo wallet');\n            console.error(error);\n        })\n    };\n\n    const disconnect = () => {\n        setAddress(null);\n        setName(null);\n        setBalance(null);\n    };\n\n    return (\n        <>\n            <Notification />\n            {address ? (\n                <Container fluid=\"md\">\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\n                        <Nav.Item>\n                            <Wallet\n                                address={address}\n                                name={name}\n                                amount={balance}\n                                disconnect={disconnect}\n                                symbol={\"ALGO\"}\n                            />\n                        </Nav.Item>\n                    </Nav>\n                    <main>\n                        <Polls address={address} fetchBalance={fetchBalance}/>\n                    </main>\n                </Container>\n            ) : (\n                <Cover name={\"Voting app\"} coverImg={coverImg} connect={connectWallet}/>\n            )}\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk, { makePaymentTxnWithSuggestedParams } from \"algosdk\";\nimport {\n    algodClient,\n    indexerClient,\n    votingNote,\n    minRound,\n    myAlgoConnect,\n    numGlobalBytes,\n    numGlobalInts,\n    numLocalBytes,\n    numLocalInts\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/voting_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/voting_clear.teal\";\nimport {base64ToUTF8String, utf8ToBase64String} from \"./conversions\";\n\nclass Poll {\n    constructor(id, image, description, option1, option2, option3, count1, count2, count3, voting_start, voting_end, winner, owner, appId) {\n        this.id = id;\n        this.image = image;\n        this.description = description;\n        this.option1 = option1;\n        this.option2 = option2;\n        this.option3 = option3;\n        this.count1 = count1;\n        this.count2 = count2;\n        this.count3 = count3;\n        this.voting_start = voting_start;\n        this.voting_end = voting_end;\n        this.winner = winner;\n        this.owner = owner;\n        this.appId = appId;\n    }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n    let encoder = new TextEncoder();\n    let programBytes = encoder.encode(programSource);\n    let compileResponse = await algodClient.compile(programBytes).do();\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n}\n\n// CREATE PRODUCT: ApplicationCreateTxn\nexport const createPollAction = async (senderAddress, poll) => {\n    console.log(\"Adding poll...\")\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Compile programs\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\n    const compiledClearProgram = await compileProgram(clearProgram)\n\n    // Build note to identify transaction later and required app args as Uint8Arrays\n    let note = new TextEncoder().encode(votingNote);\n    let id = new TextEncoder().encode(poll.id);\n    let image = new TextEncoder().encode(poll.image);\n    let description = new TextEncoder().encode(poll.description);\n    let option1 = new TextEncoder().encode(poll.option1);\n    let option2 = new TextEncoder().encode(poll.option2);\n    let option3 = new TextEncoder().encode(poll.option3);\n    let voting_duration = algosdk.encodeUint64(poll.voting_end);\n\n    let appArgs = [id, image, description, option1, option2, option3, voting_duration]\n\n    // Create ApplicationCreateTxn\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\n        from: senderAddress,\n        suggestedParams: params,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        approvalProgram: compiledApprovalProgram,\n        clearProgram: compiledClearProgram,\n        numLocalInts: numLocalInts,\n        numLocalByteSlices: numLocalBytes,\n        numGlobalInts: numGlobalInts,\n        numGlobalByteSlices: numGlobalBytes,\n        note: note,\n        appArgs: appArgs\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get created application id and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['application-index'];\n    console.log(\"Created new app-id: \", appId);\n    return appId;\n}\n\nexport const optInAction = async (senderAddress, poll) => {\n    console.log(\"Opting in...\")\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    let optinTxn = algosdk.makeApplicationOptInTxnFromObject({\n        from: senderAddress,\n        appIndex: poll.appId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n    })\n\n    let signedTxn = await myAlgoConnect.signTransaction(optinTxn.toByte())\n    let tx = await algodClient.sendRawTransaction(signedTxn.blob).do()\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n    console.log(\"Voting transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n}\n\nexport const declareWinnerAction = async (senderAddress, poll) => {\n    console.log(\"Declaring the winner...\")\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    let voteArg = new TextEncoder().encode(\"declare_winner\")\n    let appArgs = [voteArg]\n\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: senderAddress,\n        appIndex: poll.appId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n        appArgs: appArgs\n    })\n\n    let signedTxn = await myAlgoConnect.signTransaction(appCallTxn.toByte())\n    let tx = await algodClient.sendRawTransaction(signedTxn.blob).do()\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n    console.log(\"Voting transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n}\n\nexport const voteAction = async (senderAddress, poll, option) => {\n    console.log(\"Voting...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Build required app args as Uint8Array\n    let voteArg = new TextEncoder().encode(\"vote\")\n    let optionArg = new TextEncoder().encode(option);\n    let appArgs = [voteArg, optionArg]\n    console.log(\"Option: \", option)\n\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: senderAddress,\n        appIndex: poll.appId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n        appArgs: appArgs\n    })\n\n    let signedTxn = await myAlgoConnect.signTransaction(appCallTxn.toByte())\n    let tx = await algodClient.sendRawTransaction(signedTxn.blob).do()\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n    console.log(\"Voting transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n}\n\nexport const deletePollAction = async (senderAddress, index) => {\n    console.log(\"Deleting application...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Create ApplicationDeleteTxn\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\n        from: senderAddress, suggestedParams: params, appIndex: index,\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get application id of deleted application and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['txn']['txn'].apid;\n    console.log(\"Deleted app-id: \", appId);\n}\n\nexport const getPollsAction = async () => {\n    console.log(\"Fetching polls...\")\n    let note = new TextEncoder().encode(votingNote);\n    let encodedNote = Buffer.from(note).toString(\"base64\");\n\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n    let transactionInfo = await indexerClient.searchForTransactions()\n        .notePrefix(encodedNote)\n        .txType(\"appl\")\n        .minRound(minRound)\n        .do();\n    let polls = []\n    for (const transaction of transactionInfo.transactions) {\n        let appId = transaction[\"created-application-index\"]\n        if (appId) {\n            // Step 2: Get each application by application id\n            let poll = await getApplication(appId)\n            if (poll) {\n                polls.push(poll)\n            }\n        }\n    }\n    console.log(\"Polls fetched.\")\n    return polls\n}\n\nexport const isOptedInAction = async (address, appId) => {\n    const accountLocalState = await indexerClient.lookupAccountAppLocalStates(address).do()\n    console.log(accountLocalState[\"apps-local-states\"])\n    const appIds = accountLocalState[\"apps-local-states\"]\n    for(let i = 0; i < appIds.length; i ++){\n        if(appIds[i].id == appId){\n            console.log(\"User is opted in into this app\")\n            return true\n        }\n    }\n    return false\n}\n\nconst getApplication = async (appId) => {\n    try {\n        // 1. Get application by appId\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\n        if (response.application.deleted) {\n            return null;\n        }\n        let globalState = response.application.params[\"global-state\"]\n\n        // 2. Parse fields of response and return product\n        let owner = response.application.params.creator\n        let id = \"\"\n        let image = \"\"\n        let description = \"\"\n        let option1 = \"\"\n        let option2 = \"\"\n        let option3 = \"\"\n        let winner = \"\"\n        let voting_start = 0\n        let voting_end = 0\n        let count1 = 0\n        let count2 = 0\n        let count3 = 0\n\n        const getField = (fieldName, globalState) => {\n            return globalState.find(state => {\n                return state.key === utf8ToBase64String(fieldName);\n            })\n        }\n\n        if (getField(\"ID\", globalState) !== undefined) {\n            let field = getField(\"ID\", globalState).value.bytes\n            id = base64ToUTF8String(field)\n        }\n\n        if (getField(\"IMAGE\", globalState) !== undefined) {\n            let field = getField(\"IMAGE\", globalState).value.bytes\n            image = base64ToUTF8String(field)\n        }\n\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\n            description = base64ToUTF8String(field)\n        }\n\n        if (getField(\"OPTION1\", globalState) !== undefined) {\n            let field = getField(\"OPTION1\", globalState).value.bytes\n            option1 = base64ToUTF8String(field)\n        }\n\n        if (getField(\"OPTION2\", globalState) !== undefined) {\n            let field = getField(\"OPTION2\", globalState).value.bytes\n            option2 = base64ToUTF8String(field)\n        }\n\n        if (getField(\"OPTION3\", globalState) !== undefined) {\n            let field = getField(\"OPTION3\", globalState).value.bytes\n            option3 = base64ToUTF8String(field)\n        }\n\n        if (getField(\"WINNER\", globalState) !== undefined) {\n            let field = getField(\"WINNER\", globalState).value.bytes\n            winner = base64ToUTF8String(field)\n        }\n\n        if (getField(\"START\", globalState) !== undefined) {\n            voting_start = getField(\"START\", globalState).value.uint\n        }\n\n        if (getField(\"END\", globalState) !== undefined) {\n            voting_end = getField(\"END\", globalState).value.uint\n        }\n\n        if (getField(\"COUNT1\", globalState) !== undefined) {\n            count1 = getField(\"COUNT1\", globalState).value.uint\n        }\n\n        if (getField(\"COUNT2\", globalState) !== undefined) {\n            count2 = getField(\"COUNT2\", globalState).value.uint\n        }\n\n        if (getField(\"COUNT3\", globalState) !== undefined) {\n            count3 = getField(\"COUNT3\", globalState).value.uint\n        }\n\n        return new Poll(id, image, description, option1, option2, option3, count1, count2, count3, voting_start, voting_end, winner, owner, appId)\n    } catch (err) {\n        return null;\n    }\n}","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n    algodToken: \"\",\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\n    algodPort: \"\",\n    indexerToken: \"\",\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n    indexerPort: \"\",\n}\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\n//limit the searching area for indexer\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const votingNote = \"voting-system:uv1\"\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 1;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 5; // Global variables stored as Int: count, sold\nexport const numGlobalBytes = 8; // Global variables stored as Bytes: name, description, image\n\nexport const ALGORAND_DECIMALS = 6;"],"sourceRoot":""}